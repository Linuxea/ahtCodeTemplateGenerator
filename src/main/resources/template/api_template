package com.aht.api.order.base;

import com.aht.core.utils.Result;
import com.github.pagehelper.PageInfo;
import io.swagger.annotations.ApiOperation;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;

/**
 * {{table_comment}} api
 *
 * @author robot
 */
public interface {{tableCamel}}Api {

    String SERVICE_NAME = 这里要完善服务名;

    String CONTEXT = 这是要完善上下文路径;

    String BASE_PATH = "/{{tableDecapitalize}}";

    String CLIENT_PATH = CONTEXT + BASE_PATH;


    /**
     * 根据查询条件分页搜索
     *
     * @param po       查询条件
     * @param pageNum  页码
     * @param pageSize 页长
     * @return 分页信息
     */
    @ApiOperation("根据查询条件分页搜索")
    @PostMapping("/pageList")
    Result<PageInfo<{{tablePO}}>> list(@RequestBody {{tablePO}} po,
                              @RequestParam(value = "pageNum", required = false, defaultValue = "1") int pageNum,
                              @RequestParam(value = "pageSize", required = false, defaultValue = "10") int pageSize);

    /**
     * 根据查询条件分页搜索
     *
     * @param po       查询条件
     * @param pageNum  页码
     * @param pageSize 页长
     * @return 分页信息
     */
    @ApiOperation("根据查询条件递归子机构分页搜索")
    @PostMapping("/pageListWithSubOrg")
    Result<PageInfo<{{tablePO}}>> pageListWithSubOrg(@RequestBody {{tablePO}} po,
                                        @RequestParam(value = "pageNum", required = false, defaultValue = "1") int pageNum,
                                        @RequestParam(value = "pageSize", required = false, defaultValue = "10") int pageSize);

    /**
     * 添加
     *
     * @param po 参数
     * @return 结果
     */
    @PostMapping("/insert")
    @ApiOperation("添加")
    Result<Void> insert(@RequestBody {{tablePO}} po);

    /**
     * 编辑
     *
     * @param po 参数
     * @return 结果
     */
    @PostMapping("/update")
    @ApiOperation("编辑")
    Result<Void> update(@RequestBody {{tablePO}} po);


    /**
     * 逻辑删除
     *
     * @param ids 根据ID批量逻辑删除
     * @return 无
     */
    @GetMapping("/logicDelete")
    @ApiOperation(value = "【逻辑删除】", notes = "根据ID批量逻辑删除 格式：1,2,3,4")
    Result<Integer> logicDelete(@RequestParam String ids);


    /**
     * 根据 id 获取单个对象
     *
     * @param id id
     * @return TrainTopicCoursePO
     */
    @GetMapping("/get")
    @ApiOperation(value = "【根据ID查询】", notes = "根据ID查询")
    Result<{{tablePO}}> get(@RequestParam Long id);


    /**
     * 根据参数获取最多一个
     *
     * @param po 参数
     * @return 最多一个结果
     */
    @ApiOperation("根据参数获取最多一个")
    @PostMapping("/single")
    Result<{{tablePO}}> single(@RequestBody {{tablePO}} po);

}